name: Go

on:
  workflow_dispatch:
    inputs:
      servicesList:
        type: string
        description: "List of services to build"
        required: false
        default: "all"
      deployTo:
        type: choice
        description: "Environment to deploy to"
        options:
          - "dev"
          - "prod"
        default: "dev"
  push:
    branches: ["main","dev"]
  pull_request:
    branches: ["main","dev"]

jobs:
  tag:
    runs-on: ubuntu-latest
    environment: golang
    outputs:
      latest_tag: ${{ steps.set_latest_tag.outputs.latest_tag }}
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GH_ACCESS_TOKEN }}
          release_branches: main
          tag_prefix: v
      - name: Set latest tag output
        id: set_latest_tag
        run: |
          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
            echo "latest_tag=${{ steps.tag_version.outputs.previous_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "latest_tag=${{ steps.tag_version.outputs.new_tag }}" >> "$GITHUB_OUTPUT"
          fi

  build:
    runs-on: ubuntu-latest
    needs:
      - tag
    environment: golang
    outputs:
      steampipe: ${{ steps.build_services.outputs.steampipe }}
      auth-service: ${{ steps.build_services.outputs.auth-service }}
      checkup-worker: ${{ steps.build_services.outputs.checkup-worker }}
      compliance-report-worker: ${{ steps.build_services.outputs.compliance-report-worker }}
      compliance-service: ${{ steps.build_services.outputs.compliance-service }}
      compliance-summarizer: ${{ steps.build_services.outputs.compliance-summarizer }}
      describe-scheduler: ${{ steps.build_services.outputs.describe-scheduler }}
      inventory-service: ${{ steps.build_services.outputs.inventory-service }}
      metadata-service: ${{ steps.build_services.outputs.metadata-service }}
      migrator-worker: ${{ steps.build_services.outputs.migrator-worker }}
      onboard-service: ${{ steps.build_services.outputs.onboard-service }}
      swagger-ui: ${{ steps.build_services.outputs.swagger-ui }}
      analytics-worker: ${{ steps.build_services.outputs.analytics-worker }}
      steampipe-plugin-opengovernance: ${{ steps.build_services.outputs.steampipe-plugin-opengovernance }}
      integration-service: ${{ steps.build_services.outputs.integration-service }}
      integration-v2-service: ${{ steps.build_services.outputs.integration-v2-service }}
      es-sink-service: ${{ steps.build_services.outputs.es-sink-service }}
      wastage-service: ${{ steps.build_services.outputs.wastage-service }}
      information-service: ${{ steps.build_services.outputs.information-service }}
      query-runner-worker: ${{ steps.build_services.outputs.query-runner-worker }}
      demo-importer-worker: ${{ steps.build_services.outputs.demo-importer-worker }}
    env:
      SERVICE_LIST: ${{ github.event.inputs.servicesList }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: List and Count Services
      - name: List and Count Services
        id: list_services
        run: |
          ./scripts/list_services > ./service-list
          # Process the service list to determine services to build
          cat ./service-list | sed 's/\s\+/\n/g' | sed 's/^\<steampipe\>$//g' | sed '/^$/d' > ./build_services
          # Count the number of services to build
          SERVICE_COUNT=$(wc -l < ./build_services)
          echo "service_count=$SERVICE_COUNT" >> $GITHUB_OUTPUT
          echo "Services to build: $SERVICE_COUNT"

      # Step 3: Conditionally Free Disk Space
      - name: Free Disk Space (Ubuntu)
        if: steps.list_services.outputs.service_count > 3
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      # Step 4: Install musl cc
      - name: Install musl cc
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools musl-dev musl

      # Step 5: Checkout Code Again (if needed)
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5

      # Step 6: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache: false

      # Step 7: Go Cache
      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 8: Configure Git
      - name: Configure Git
        run: git config --global url.https://$GH_ACCESS_TOKEN@github.com/opengovern.insteadOf https://github.com/opengovern

      # Step 9: Build Services
      - name: Build services
        id: build_services
        run: |
          mkdir -p ./build
          if [ ! -z "$(cat ./build_services)" ]; then
            for f in $(cat ./build_services); do
              CC=/usr/bin/musl-gcc GOPRIVATE="github.com/opengovern" GOOS=linux GOARCH=amd64 go build -v -ldflags "-linkmode external -extldflags '-static' -s -w" -tags musl -o ./build/$f ./cmd/$f;
            done
            chmod +x ./build/*
          fi
          # Set outputs for each service
          for f in $(cat ./service-list); do
            echo "$f=true" >> "$GITHUB_OUTPUT"
          done

      # Step 10: Pack Build (Conditional)
      - name: Pack build
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        run: tar -czvf build.tar.gz build

      # Step 11: Upload Artifact (Conditional)
      - name: Upload artifact
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.tar.gz
          retention-days: 1
