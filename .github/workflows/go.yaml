# .github/workflows/go.yaml
name: Go

on:
  workflow_dispatch:
    inputs:
      servicesList:
        type: string
        description: "List of services to build"
        required: false
        default: "all"
      deployTo:
        type: choice
        description: "Environment to deploy to"
        options:
          - "dev"
          - "prod"
        default: "dev"
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  tag:
    runs-on: ubuntu-latest
    environment: golang
    outputs:
      latest_tag: ${{ steps.set_latest_tag.outputs.latest_tag }}
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GH_ACCESS_TOKEN }}
          release_branches: main
          tag_prefix: v

      - name: Set latest tag output
        id: set_latest_tag
        run: |
          if [[ -z "${{ steps.tag_version.outputs.new_tag }}" ]]; then
            echo "latest_tag=${{ steps.tag_version.outputs.previous_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "latest_tag=${{ steps.tag_version.outputs.new_tag }}" >> "$GITHUB_OUTPUT"
          fi

  build:
    runs-on: ubuntu-latest
    needs:
      - tag
    environment: golang
    outputs:
      steampipe: ${{ steps.build_services.outputs.steampipe }}
      auth-service: ${{ steps.build_services.outputs.auth-service }}
      checkup-worker: ${{ steps.build_services.outputs.checkup-worker }}
      compliance-report-worker: ${{ steps.build_services.outputs.compliance-report-worker }}
      compliance-service: ${{ steps.build_services.outputs.compliance-service }}
      compliance-summarizer: ${{ steps.build_services.outputs.compliance-summarizer }}
      describe-scheduler: ${{ steps.build_services.outputs.describe-scheduler }}
      inventory-service: ${{ steps.build_services.outputs.inventory-service }}
      metadata-service: ${{ steps.build_services.outputs.metadata-service }}
      migrator-worker: ${{ steps.build_services.outputs.migrator-worker }}
      onboard-service: ${{ steps.build_services.outputs.onboard-service }}
      swagger-ui: ${{ steps.build_services.outputs.swagger-ui }}
      analytics-worker: ${{ steps.build_services.outputs.analytics-worker }}
      steampipe-plugin-opengovernance: ${{ steps.build_services.outputs.steampipe-plugin-opengovernance }}
      integration-service: ${{ steps.build_services.outputs.integration-service }}
      integration-v2-service: ${{ steps.build_services.outputs.integration-v2-service }}
      es-sink-service: ${{ steps.build_services.outputs.es-sink-service }}
      wastage-service: ${{ steps.build_services.outputs.wastage-service }}
      information-service: ${{ steps.build_services.outputs.information-service }}
      query-runner-worker: ${{ steps.build_services.outputs.query-runner-worker }}
      demo-importer-worker: ${{ steps.build_services.outputs.demo-importer-worker }}
    env:
      SERVICE_LIST: ${{ github.event.inputs.servicesList }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Install musl cc
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools musl-dev musl

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "./go.mod"
          cache: false

      - name: Cache Go Modules and Build Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}-
            ${{ runner.os }}-go-

      - name: Configure Git for Private Repos
        run: |
          git config --global url.https://$GH_ACCESS_TOKEN@github.com/opengovern.insteadOf https://github.com/opengovern

      - name: Build services
        id: build_services
        run: |
          set -e
          set -x
          ./scripts/list_services > ./service-list || { echo "Error generating service list"; exit 1; }
          cat ./service-list
          cat ./service-list | sed 's/\s\+/\n/g' | sed 's/^\<steampipe\>$//g' | sed '/^$/d' > ./build_services
          cat ./build_services
          mkdir -p ./build
          if [ ! -z "$(cat ./build_services)" ]; then
            for f in $(cat ./build_services); do
              CC=/usr/bin/musl-gcc GOPRIVATE="github.com/opengovern" GOOS=linux GOARCH=amd64 go build -v -ldflags "-linkmode external -extldflags '-static' -s -w" -tags musl -o ./build/$f ./cmd/$f;
            done
            chmod +x ./build/*
          fi
          for f in $(cat ./service-list); do echo "$f=true" >> "$GITHUB_OUTPUT"; done

      - name: Pack build
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        run: |
          tar -czvf build.tar.gz build

      - name: Upload artifact
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.tar.gz
          retention-days: 1

  # Deployment Jobs using Reusable Workflow

  deploy-steampipe:
    needs:
      - build
      - tag
      - deploy-steampipe-plugin-opengovernance
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "steampipe-service"
      dockerfile: "docker/SteampipeServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/steampipe-service:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: (needs.build.outputs.steampipe-plugin-opengovernance == 'true' || needs.build.outputs.steampipe == 'true') && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-auth-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "auth-service"
      dockerfile: "docker/AuthServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/auth-service:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.auth-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-checkup-worker:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "checkup-worker"
      dockerfile: "docker/CheckupWorkerDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/checkup-worker:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.checkup-worker == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-compliance-report-worker:
    needs:
      - build
      - tag
      - deploy-steampipe-plugin-opengovernance
      - deploy-steampipe
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "compliance-report-worker"
      dockerfile: "docker/ComplianceReportWorkerDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/compliance-report-worker:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: (needs.build.outputs.steampipe-plugin-opengovernance == 'true' || needs.build.outputs.compliance-report-worker == 'true') && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-compliance-summarizer:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "compliance-summarizer"
      dockerfile: "docker/ComplianceSummarizerDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/compliance-summarizer:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.compliance-summarizer == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-compliance-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "compliance-service"
      dockerfile: "docker/ComplianceServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/compliance-service:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.compliance-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-describe-scheduler:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "describe-scheduler"
      dockerfile: "docker/DescribeSchedulerDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/describe-scheduler:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.describe-scheduler == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-integration-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "integration"
      dockerfile: "docker/IntegrationServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/integration:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.integration-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-integration-v2-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "integration-v2"
      dockerfile: "docker/IntegrationV2ServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/integration-v2:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.integration-v2-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-es-sink-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "es-sink"
      dockerfile: "docker/EsSinkServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/es-sink:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.es-sink-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-inventory-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "inventory-service"
      dockerfile: "docker/InventoryServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/inventory-service:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.inventory-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-metadata-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "metadata-service"
      dockerfile: "docker/MetadataServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/metadata-service:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.metadata-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-migrator-worker:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "migrator"
      dockerfile: "docker/MigratorDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/migrator:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.migrator-worker == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-onboard-service:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "onboard-service"
      dockerfile: "docker/OnboardServiceDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/onboard-service:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.onboard-service == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-swagger-ui:
    needs:
      - build
      - tag
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "swagger-ui"
      dockerfile: "docker/SwaggerUIDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/swagger-ui:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: needs.build.outputs.swagger-ui == 'true' && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-analytics-worker:
    needs:
      - build
      - tag
      - deploy-steampipe-plugin-opengovernance
      - deploy-compliance-report-worker
    uses: ./.github/workflows/deploy-service.yml
    with:
      service_name: "analytics-worker"
      dockerfile: "docker/AnalyticsWorkerDockerfile"
      build_args: "PLUGIN_REGISTRY=ghcr.io/opengovern"
      tags: |
        ghcr.io/${{ github.repository_owner }}/analytics-worker:${{ needs.tag.outputs.latest_tag }}
    secrets:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    if: (needs.build.outputs.steampipe-plugin-opengovernance == 'true' || needs.build.outputs.analytics-worker == 'true') && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

  deploy-steampipe-plugin-opengovernance:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    environment: docker
    permissions:
      id-token: write
      contents: read
    if: (needs.build.outputs.steampipe-plugin-opengovernance == 'true' ||
          needs.build.outputs.steampipe == 'true' ||
          needs.build.outputs.compliance-report-worker == 'true' ||
          needs.build.outputs.analytics-worker == 'true') && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Check if we need to actually push
        id: check_if_push
        run: |
          if [[ -z "${{ needs.build.outputs.steampipe-plugin-opengovernance }}" ]]; then
            echo "do_build=false" >> "$GITHUB_OUTPUT"
          else
            echo "do_build=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout code
        if: steps.check_if_push.outputs.do_build == 'true'
        uses: actions/checkout@v3

      - name: Download artifact
        if: steps.check_if_push.outputs.do_build == 'true'
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .

      - name: Unpack artifact
        if: steps.check_if_push.outputs.do_build == 'true'
        run: |
          set -e
          tar -xvf build.tar.gz
          ls -la ./build

      - name: Verify Build Directory
        if: steps.check_if_push.outputs.do_build == 'true'
        run: |
          if [ -d "./build" ]; then
            echo "Build directory exists."
          else
            echo "Build directory does not exist!"
            exit 1
          fi

      - name: Log in to Container Registry
        if: steps.check_if_push.outputs.do_build == 'true'
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Docker Image for Steampipe Plugin Opengovernance
        if: steps.check_if_push.outputs.do_build == 'true'
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/steampipe-plugin-opengovernance:0.0.1
            ghcr.io/${{ github.repository_owner }}/steampipe-plugin-opengovernance:${{ needs.tag.outputs.latest_tag }}
          file: docker/SteampipePluginOpengovernanceDockerfile
          build_args: |
            PLUGIN_REGISTRY=ghcr.io/opengovern
          context: .  # Set context to repository root
